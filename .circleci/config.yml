version: 2.1

jobs:
  say-hello:
    macos:
      xcode: "15.4.0" # Specify the Xcode version you need
    steps:
      - checkout
      - run:
          name: "Print a test message"
          command: "echo The CI/CD pipeline has been successfully initiated."

  build:
    macos:
      xcode: "15.4.0"
    steps:
      - checkout
      - run:
          name: "Install UV and Add to Path"
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: "Set up virtual environment and install dependencies"
          command: |
            uv venv .venv
            source .venv/bin/activate
            python -m ensurepip --default-pip
            uv sync
            uv pip install coverage pytest 
            echo 'export PATH="$HOME/project/.venv/bin:$PATH"' >> $BASH_ENV
      - run:
          name: "Install dependencies"
          command: |
            source .venv/bin/activate
            uv sync
            uv pip install coverage
      - persist_to_workspace:
          root: .
          paths:
            - .venv

  test:
    macos:
      xcode: "15.4.0"
    environment:
      PYTHONPATH: .
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Ensure virtual environment exists and activate"
          command: |
            if ! command -v uv &> /dev/null; then
              echo "UV not found. Installing..."
              curl -LsSf https://astral.sh/uv/install.sh | sh
              echo 'export PATH="$HOME/.local/bin:$PATH"' >> $BASH_ENV
              source $BASH_ENV
            fi

            if [ ! -d ".venv" ] || [ ! -f ".venv/bin/python3" ]; then
              echo "Virtual environment is missing or broken. Recreating..."
              uv venv .venv
              source .venv/bin/activate
              python -m ensurepip --default-pip
              uv sync
              uv pip install coverage
            else
              source .venv/bin/activate
              if ! python -c "import coverage" &> /dev/null; then
                echo "Coverage module missing. Reinstalling..."
                uv pip install coverage
              fi
            fi
      - run:
          name: "Execute test suite"
          command: |
            source .venv/bin/activate
            mkdir -p test-results
            python -m coverage run -m pytest tests/ --junitxml=test-results/junit.xml
      - run:
          name: "Run static analysis (mypy)"
          command: |
            source .venv/bin/activate
            uv pip install mypy  
            mypy --strict src/
      - run:
          name: "Enforce coverage threshold"
          command: |
            source .venv/bin/activate
            python -m coverage report --fail-under=85
            python -m coverage xml
            coverage json -o test-results/coverage.json
      - run:
          name: "Execute nose2 tests (Optional)"
          command: |
            source .venv/bin/activate
            uv pip install nose2
            if command -v nose2 &> /dev/null; then  
              python -m nose2 --with-coverage
            else
              echo "nose2 is not installed. This step will be skipped."
            fi
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov
      - store_artifacts:
          path: coverage.xml

  report-results:
    macos:
      xcode: "15.4.0"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Summarize test results"
          command: |
            echo "Summary of test execution:"
            if [ -f test-results/junit.xml ]; then
                grep -o 'tests passed' test-results/junit.xml | wc -l | awk '{print "Number of passed tests: " $1}'
                grep -o 'failures' test-results/junit.xml | wc -l | awk '{print "Number of failed tests: " $1}'
            else
                echo "Warning: test-results/junit.xml not found. Skipping summary."
            fi
      - run:
          name: "Summarize code coverage"
          command: |
            echo "Code coverage report:"
            if [ -f coverage.xml ]; then
                cat coverage.xml | grep -o 'line-rate="[^"]*"' | head -n 1
            else
                echo "Warning: coverage.xml not found. Skipping summary."
            fi

workflows:
  ci-pipeline:
    jobs:
      - build
      - test:
          requires:
            - build
      - report-results:
          requires:
            - test
