# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # Job 1: Setup Environment and Install All Dependencies
  build:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - run:
          name: "Install UV and Add to Path"
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            # Add uv to PATH for subsequent steps in this job
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            uv --version # Verify installation
      - run:
          name: "Create Virtual Env & Install All Dependencies via UV Sync"
          command: |
            uv venv .venv --python 3.13 # Create venv with specific python
            source .venv/bin/activate
            uv sync --all-packages --extra test --extra dev --verbose
      - run:
          name: "Verify Installation (Optional)"
          command: |
            source .venv/bin/activate
            uv pip list # Check if workspace members and tools are listed
            ruff --version
            pytest --version
            mypy --version
            coverage --version
      - persist_to_workspace:
          # Persist the entire project directory, including the populated .venv
          root: .
          paths:
            - .

# Job 2: Linting and Formatting Checks
  lint:
    docker:
      - image: cimg/python:3.13
    steps:
      - attach_workspace:
          at: . # Attach the workspace persisted from 'setup'
      - run:
          name: "Run Linting and Formatting Checks"
          command: |
            source .venv/bin/activate # Activate the venv from the workspace
            # Use --check for formatting in CI to avoid changing files
            ruff format --check .
            ruff check .

  test:
    docker:
      - image: cimg/python:3.13
    environment:
      PYTHONPATH: .
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Activate Venv and Create Test Results Directory"
          command: |
            source .venv/bin/activate
            mkdir -p test-results # Create directory for JUnit XML
      - run:
          name: "Execute Test Suite (pytest + coverage)"
          command: |
            source .venv/bin/activate
            pytest . --junitxml=test-results/junit.xml
      - run:
          name: "Run Static Analysis (mypy)"
          command: |
            source .venv/bin/activate
            # Target specific source and test directories for mypy
            mypy src tests
      - run:
          name: "Enforce Coverage Threshold and Generate Reports"
          command: |
            source .venv/bin/activate
            # Use coverage CLI now that pytest has run it
            coverage report --fail-under=85 # Check threshold
            coverage xml # Generate XML report
            coverage json -o test-results/coverage.json # Generate JSON report
      - run:
          name: "Execute nose2 tests (Optional)"
          command: |
            source .venv/bin/activate
            uv pip install nose2
            if command -v nose2 &> /dev/null; then  
              python -m nose2 --with-coverage
            else
              echo "nose2 is not installed. This step will be skipped."
            fi
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov
      - store_artifacts:
          path: coverage.xml

  report-results:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Summarize test results"
          command: |
            echo "Summary of test execution:"
            if [ -f test-results/junit.xml ]; then
                grep -o 'tests passed' test-results/junit.xml | wc -l | awk '{print "Number of passed tests: " $1}'
                grep -o 'failures' test-results/junit.xml | wc -l | awk '{print "Number of failed tests: " $1}'
            else
                echo "Warning: test-results/junit.xml not found. Skipping summary."
            fi
      - run:
          name: "Summarize code coverage"
          command: |
            echo "Code coverage report:"
            if [ -f coverage.xml ]; then
                cat coverage.xml | grep -o 'line-rate="[^"]*"' | head -n 1
            else
                echo "Warning: coverage.xml not found. Skipping summary."
            fi

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  ci-pipeline:
    jobs:
      - build
      - test:
          requires:
            - build
      - report-results:
          requires:
            - test
